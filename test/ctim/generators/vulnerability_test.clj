(ns ctim.generators.vulnerability-test
  (:require [clj-momo.test-helpers.core :as mth]
            [clojure.test :refer [are deftest is testing use-fixtures]]
            [clojure.test.check.clojure-test :refer [defspec]]
            [ctim.schemas.vulnerability :as vulnerability]
            [ctim.test-helpers
             [core :as th]
             [properties :as property]]
            [flanders.utils :as fu]))

(use-fixtures :once
  th/fixture-spec-validation
  mth/fixture-schema-validation
  (th/fixture-spec vulnerability/Vulnerability
                   "test.vulnerability")
  (th/fixture-spec vulnerability/NewVulnerability
                   "test.new-vulnerability")
  (th/fixture-spec (fu/require-all vulnerability/Vulnerability)
                   "test.max.vulnerability")
  (th/fixture-spec (fu/require-all vulnerability/NewVulnerability)
                   "test.max.new-vulnerability"))

;; Vulnerability

(defspec ^:gen spec-generated-vulnerability-is-valid
  (property/generated-entity-is-valid :test.vulnerability/map))

(defspec ^:gen spec-generated-max-vulnerability-is-valid
  (property/generated-entity-is-valid :test.max.vulnerability/map))

(defspec ^:gen spec-generated-vulnerability-id-is-valid
  (property/generated-entity-id-is-valid :test.vulnerability/map
                                         "vulnerability"))

;; New Vulnerability

(defspec ^:gen spec-generated-new-vulnerability-is-valid
  (property/generated-entity-is-valid :test.new-vulnerability/map))

(defspec ^:gen spec-generated-max-new-vulnerability-is-valid
  (property/generated-entity-is-valid :test.max.vulnerability/map))

(defspec ^:gen spec-generated-new-vulnerability-id-is-valid
  (property/generated-entity-id-is-valid :test.new-vulnerability/map
                                         "vulnerability"
                                         :optional))

(deftest test-formatted-cpe-23-string?
  (are [input] (testing (format "%s should be a valid cpe23 formatted string" input)
                 (is (vulnerability/formatted-cpe-23-string? input))
                 true)
    "cpe:2.3:o:google:android:11.0:*:*:*:*:*:*:*"
    "cpe:2.3:a:nvidia:gpu_driver:*:*:*:*:*:*:*:*"
    "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*"
    "cpe:2.3:o:redhat:enterprise_linux_kernel-based_virtual_machine:-:*:*:*:*:*:*:*"
    "cpe:2.3:o:nutanix:ahv:-:*:*:*:*:*:*:*"
    "cpe:2.3:o:citrix:hypervisor:-:*:*:*:*:*:*:*"
    "cpe:2.3:a:cisco:firepower_management_center:*:*:*:*:*:*:*:*"
    "cpe:2.3:a:cisco:enterprise_nfv_infrastructure_software:*:*:*:*:*:*:*:*"
    "cpe:2.3:a:cisco:connected_mobile_experiences:10.6.2:*:*:*:*:*:*:*"
    "cpe:2.3:o:cisco:staros:*:*:*:*:*:*:*:*"
    "cpe:2.3:o:cisco:rv215w_wireless-n_vpn_router_firmware:1.2.2.8:*:*:*:*:*:*:*"
    "cpe:2.3:a:cisco:application_extension_platform:1.0.3.55:*:*:*:*:*:*:*"
    "cpe:2.3:o:microsoft:windows_server_2008:r2:sp1:*:*:*:*:x64:*"
    "cpe:2.3:a:sap:s\\/4hana:100:*:*:*:*:*:*:*"
    "cpe:2.3:a:sap:s\\/4hana:100:*:*:*:*:financial_products_subledger:*:*")

  (are [input] (testing (format "%s should not be a valid cpe23 formatted striang" input)
                 (is (not (vulnerability/formatted-cpe-23-string? input)))
                 true)
    "fcpe:2.3:o:google:android:11.0:*:*:*:*:*:*:*"
    "cpe:2.4:o:cisco:rv215w_wireless-n_vpn_router_firmware:1.2.2.8:*:*:*:*:*:*:*"
    "cpe:2.3:a:nvidia:gpu_driver:*:*:*:*:*:*:*:*:"
    "cpe:2.3:q:microsoft:windows:-:*:*:*:*:*:*:*"
    "cpe:2.3:o:microsoft:windows_server_2008:r2:sp1:*:invalid-lang:*:*:x64:*"))
